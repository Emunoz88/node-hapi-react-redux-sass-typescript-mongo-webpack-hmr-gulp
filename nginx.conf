#
# Sample nginx.conf optimized for EC2 c1.medium to xlarge instances.
# Also look at the haproxy.conf file for how the backend is balanced.
#

user "nginx" "nginx";
worker_processes 10;

error_log  /var/log/nginx_error.log info;

pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    # Mime types path needs to be absolute as of nginx 0.7.x from 0.6.x
    include        /usr/local/nginx/conf/mime.types;

    # Tune the appropriate default for your system accordingly.  Only used if mime types fail.
    #default_type  text/html;
    default_type  application/octet-stream;

    # These are good default values.
    tcp_nopush    on;
    tcp_nodelay   off;

    sendfile      on;
    keepalive_timeout  30;

    log_format  main  '$remote_addr - $remote_user [$time_local] $status '
                      '"$request" $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" ($request_time)';

    # Output compression with gzip
    gzip  on;
    gzip_http_version 1.1;
    gzip_vary on;
    gzip_comp_level 6;
    gzip_proxied any;
    gzip_types text/plain image/png image/gif image/jpeg text/html text/css application/json application/x-javascript application/xml application/xml+rss text/javascript;
    gzip_buffers 16 8k;
    # Disable gzip for certain browsers.
    gzip_disable “MSIE [1-6].(?!.*SV1)”;

    #
    # Virtualhost server definition for backend cluster
    #
    # This is a combination of two different references:
    #   http://brainspl.at/nginx.conf.txt - Ezra's complete config
    #   http://wiki.codemongers.com/NginxVirtualHostExample
    #
    # List upstream app servers that render dynamic content.  These are
    # typically on the same server as nginx.  These will either be multiple
    # ports (processes), or a single port if the app server has its own
    # master/slave process model.
    upstream app_servers {
        server 127.0.0.1:8000;
        server 127.0.0.1:8001;
        server 127.0.0.1:8002;    
        server 127.0.0.1:8003;
        server 127.0.0.1:8004;
    }

    # HTTP configuration
    server {
        listen       80 default sndbuf=16k rcvbuf=8k backlog=1024;
        server_name  www.yourdomainhere.com;

        # Apache DocumentRoot equivalent
        root         /var/www/html;

        access_log   /var/log/nginx_access.log main;
        
        client_body_temp_path   /tmp/nginx_client_data 1 2;
        fastcgi_temp_path       /tmp/nginx_fastcgi_data;
        proxy_temp_path         /tmp/nginx_proxy_data;
        
        # Taken from nginx wiki. Qualified thru load testing
        proxy_connect_timeout      90;
        proxy_send_timeout         90;
        proxy_read_timeout         90;
        proxy_buffer_size          4k;
        proxy_buffers              4 32k;
        proxy_busy_buffers_size    64k;
        proxy_temp_file_write_size 64k;

        location / {
          # needed to forward user's IP address to backend
          proxy_set_header  X-Real-IP  $remote_addr;

          # needed for HTTPS
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header Host $http_host;
          proxy_redirect off;
          proxy_max_temp_file_size 0;

          # Use this variable to key off whether we pass requests to backend,
          # or serve them directly via nginx.  By default everything gets
          # passed thru, and we only serve specific resources directly.
          set $send_to_app "yes";

          # Handle all images and assets explicitly.  Faster than fs check every time.
          if ($request_uri ~ "images/|img/|javascripts/|js/|stylesheets/|css/") {
            set $send_to_app "no";
            break;
          }

          # If the file exists as a static file serve it directly, without
          # running all the other rewite tests on it.
          if (-f $request_filename) { 
            set $send_to_app "no";
            break; 
          }

          # Check for index.html for directory index
          # If it's there on the filesystem, then rewite the url to add
          # /index.html to the end of it and serve it directly.
          if (-f $request_filename/index.html) {
            set $send_to_app "no";
            rewrite (.*) $1/index.html break;
          }

          # This is the meat of web app page caching.
          # It adds .html to the end of the url and then checks the filesystem for
          # that file. If it exists, then we rewrite the url to have explicit .html
          # on the end and then send it on its way to the next config rule.
          # If there is no file on the fs then it sets all the necessary headers
          # proxies to our backend.
          if (-f $request_filename.html) {
            set $send_to_app "no";
            rewrite (.*) $1.html break;
          }

          # Check our state to make sure we're forwarding it back
          if ($send_to_app = "yes") {
            proxy_pass http://app_servers;
          }
          
          # File uploads
          client_max_body_size 10m;
        }
        
        # Large content
        location ^~ download {
          client_body_buffer_size 1024k;
        }

        # redirect server error pages to the static page /50x.html
        error_page  403              /403.html;
        error_page  404              /404.html;
        error_page  500 502 503 504  /500.html;
        location = /500.html {
            root   /var/www/html;
        }
    } 
}