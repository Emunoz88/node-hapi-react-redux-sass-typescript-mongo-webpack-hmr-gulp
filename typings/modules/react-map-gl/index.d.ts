// Generated by typings
// Source: https://raw.githubusercontent.com/dhsaks/typescript-definitions/055bb4b3bc7805e6bfaa0009d471c677bc6131f9/react-map-gl/index.d.ts
declare module 'react-map-gl' {

    interface IMapGLProps {
        /**
          * The latitude of the center of the map.
          */
        latitude: number;
        /**
          * The longitude of the center of the map.
          */
        longitude: number;
        /**
          * The tile zoom level of the map.
          */
        zoom: number;
        /**
          * The Mapbox style the component should use. Can either be a string url
          * or a MapboxGL style Immutable.Map object.
          */
        mapStyle?: string;
        /**
          * The Mapbox API access token to provide to mapbox-gl-js. This is required
          * when using Mapbox provided vector tiles and styles.
          */
        mapboxApiAccessToken?: string;
        /**
          * `onChangeViewport` callback is fired when the user interacted with the
          * map. The object passed to the callback containers `latitude`,
          * `longitude` and `zoom` information.
          */
        onChangeViewport?: any;
        /**
          * The width of the map.
          */
        width: number;
        /**
          * The height of the map.
          */
        height: number;
        /**
          * Is the component currently being dragged. This is used to show/hide the
          * drag cursor. Also used as an optimization in some overlays by preventing
          * rendering while dragging.
          */
        isDragging?: boolean;
        /**
          * Required to calculate the mouse projection after the first click event
          * during dragging. Where the map is depends on where you first clicked on
          * the map.
          */
        startDragLngLat?: any[];
        /**
          * Called when a feature is hovered over. Features must set the
          * `interactive` property to `true` for this to work properly. see the
          * Mapbox example: https://www.mapbox.com/mapbox-gl-js/example/featuresat/
          * The first argument of the callback will be the array of feature the
          * mouse is over. This is the same response returned from `featuresAt`.
          */
        onHoverFeatures?: any;
        /**
          * Defaults to TRUE
          * Set to false to enable onHoverFeatures to be called regardless if
          * there is an actual feature at x, y. This is useful to emulate
          * "mouse-out" behaviors on features.
          */
        ignoreEmptyFeatures?: boolean;

        /**
          * Show attribution control or not.
          */
        attributionControl?: boolean;

        /**
          * Called when a feature is clicked on. Features must set the
          * `interactive` property to `true` for this to work properly. see the
          * Mapbox example: https://www.mapbox.com/mapbox-gl-js/example/featuresat/
          * The first argument of the callback will be the array of feature the
          * mouse is over. This is the same response returned from `featuresAt`.
          */
        onClickFeatures?: any;

        /**
          * Passed to Mapbox Map constructor which passes it to the canvas context.
          * This is unseful when you want to export the canvas as a PNG.
          */
        preserveDrawingBuffer?: boolean;

        /**
          * There are still known issues with style diffing. As a temporary stopgap,
          * add the option to prevent style diffing.
          */
        preventStyleDiffing?: boolean;
    }

    export class MapGL extends React.Component<IMapGLProps, {}>{ }
}
